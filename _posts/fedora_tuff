Talk proposal ideas

talk about a personal experience
First off: your talk doesn't need to be exclusive to be useful.
I give talks on "Imposter Syndrome" and "The Sunk-Cost Fallacy" regularly
"Soft skills" talks like that are often forgotten by technical people.
How to get involved with a community where you feel out of your depth: Because (spoiler alert) everyone feels that way at first
How not to panic when your mentor raises the stakes" :)

Outreachy task:

So i was wondering how you would feel if I offered you a different, slightly harder (but more well-defined) task
So, the Fedora Project has a set of technologies we call Fedora Modularity whose purpose is to allow you to be able to "swap out" portions of the available package set in the Fedora Linux Distribution.
The goal being to solve what we call the "Too Fast / Too Slow Problem"
(Everyone wants their OS to be stable and change nothing, except these five things that need to always be the latest version. Those five things are never the same between different users.)
So we create a default set of content and then Modules that can swap out the pieces that you as a user want to either remain stable or get a newer version of.

One of the key pieces of this is the module metadata, which is written and stored as a YAML document, and which libmodulemd exists to read, parse, modify and output.
There are three kinds of module metadata documents: Stream documents (`document: modulemd`) which describe the build rules and set of content that belongs in a particular module stream.
Oh, definition of module stream:
A stream is one of the variant "versions" of a module. We call it a "stream" because it represents a "stream of compatible updates"
So once you pick a stream, all updates you receive from that stream are expected to be backwards compatible.
So for example, there's a JavaScript interpreter called Node.js that has module streams for its 10.x, 11.x and 12.x releases right now.
If you pick one of those, you won't ever be updated to a new major version, you'll stay on compatible updates

Well, no. You'd need to do a "stream switch"
Modules require this to be a conscious decision
So your deployments don't get broken by an update

On Fedora, we have `dnf` for package management. `dnf` has many subcommands, including `dnf module`
`dnf module list`, `dnf module install module:stream`, etc/
In particular is `dnf module info`, which gives detailed information and description about each module stream

libmodulemd has the ability to manage translations for these description fields, so that DNF (and other tools like it) can present the descriptions in the user's preferred language.
We do that by including another YAML document type in the module metadata (`document: modulemd-translations`)
This is essentially a lookup table similar to how gettext .po[t] files work.
It creates a lookup table of strings with their translations in various languages.
Fedora uses a tool called Zanata where we can push the English strings and  translators from around the world can produce translated versions of them.

What we don't have right now is this: an automatic way to extract these strings and push them to Zanata, and a way to retrieve the translations from Zanata, convert them to modulemd-translation documents and include them in the module metadata in the package repository that DNF reads.
We're talking about human languages. (English, Swahili, Mandarin, etc.)
I did some exploratory work on this about half a year ago, before libmodulemd 2.0 was released.
So while the general idea is sound, it doesn't work with the current API at all.
How would you feel if I asked you to make this your project? It's got a much more concrete set of requirements than "write tests".
(I have far more guidance and direction I can give you once the project starts; This is just a high-level overview, of course)

Fedora uses a tool called Zanata where we can push the English strings and  translators from around the world can produce translated versions of them.

An automatic way to extract strings with their translations in various languages and push them to Zanata, and a way to retrieve the translations from Zanata, convert them to modulemd-translation documents and include them in the module metadata in the package repository that DNF reads.

There's two parts to the task
Phase 1) Extract all translatable strings from the modules that have been built for each Fedora release and submit them to the translation tool, Zanata, for the translators to work on.
Phase 2) Retrieve the finished translations and use the libmodulemd API to turn them into modulemd-translations documents.
(Stretch Goal) Include the code from Phase 2 into Fedora's repo creation automation so that it gets updated automatically every day.

Probably wouldn't hurt to get a little bit familiar with gettext in general. Probably Python's "Babel" project as well.
It'll be best if you do this in Python, because that will be easiest to add to the automation at the end.
http://babel.pocoo.org/en/latest/index.html
Once the program officially starts, I'll point you at my original code. Some of it may be salvageable.
Well, it relies on the old version of libmodulemd, but some pieces may be recoverable.
The original code is https://github.com/fedora-modularity/ModulemdTranslationHelpers if you really want to look at it.
But be aware, it is mostly a prototype
finish out the ModuleStream.equals()  stuff
